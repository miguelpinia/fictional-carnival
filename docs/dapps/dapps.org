#+title: ĐApps
#+author: Miguel Piña
#+date: [2018-04-25 mié 13:23]
#+OPTIONS: num:nil toc:nil
#+REVEAL_THEME: blood
#+REVEAL_EXTRA_CSS: ./presentacion.css


* Problema

Queremos desarrollar una aplicación descentralizadas

* Prerequisitos

- Ethereum ::
-

* Introducción a Smart Contracts

- Smart Contract ::

** Cuentas (Accounts)

- Ethereum maneja dos tipos de cuentas:
  - Cuentas externas :: Son controladas por parejas llave pública -
       privada. La dirección de estas cuentas es determinada por la llave
       pública.
  - Cuentas de contrato :: Son controladas por el código almacenado junto con la
       cuenta. La dirección de estas cuentas es determinado al momento de crear
       el contrato (es derivado de la dirección del creador del contrato y el
       número de transacciones enviadas desde esa cuenta).
- Cada tiene un balance en ether (en "Wei"s para ser exactos).

** Transacciones

- Una transacción es un mensaje enviado desde una cuenta hacia otra. Puede
  incluir datos binarios (payload) y Ether.
- Si la cuenta destino tiene código asociado, ese código es ejecutado y los
  datos binarios (payload) es utilizado como entrada.
- Si la cuenta destino es la cuenta *0*, la transacción crea un nuevo contrato.
- Para cambiar algo en la blockchain es necesario crear una transacción la cual
  tiene que ser aceptada por los otros.
- Una transacción siempre está firmada criptográficamente por el que lo envía (o
  crea).

** Contratos

** Bloques

- Un bloque es una estructura que permite agrupar a las transacciones que van a
  ser ejecutadas y distribuidas a todos los nodos participantes.
- Los bloques forman una secuencia lineal en el tiempo.
- Son añadidos en intervalos regulares. (En ethereum cada 17 segundos
  aproximadamente).
- El mecanismo para añadir estos bloques es través del proceso de minado ("proof
  of work").

** Ether

- Es el tipo de criptoconcurrencia creada para servir de combustible en la red
  de ethereum. Su propósito es para pagar a los nodos de la red por los recursos
  computacionales que proveen para mantener la red.
- Se puede obtener ether al participar en el minado, donde por cada bloque
  minado, se recompensa con 5 ethers ó por comprárselos a terceros.


** Ether

Los ethers está constituido de denominaciones más pequeñas, donde la más pequeña
es llamada wei y es igual a 10^{-18} ethers.

| Denominación |                           Valor |
|--------------+---------------------------------|
| Wei          |                               1 |
| Ada          |                            1000 |
| Fentoether   |                            1000 |
| Kwei         |                            1000 |
| Mwei         |                         1000000 |
| Babbage      |                         1000000 |
| Pictoether   |                         1000000 |
| Shannon      |                      1000000000 |
| Gwei         |                      1000000000 |
| Nano         |                      1000000000 |
| Szabo        |                   1000000000000 |
| Micro        |                   1000000000000 |
| Microether   |                   1000000000000 |
| Finney       |                1000000000000000 |
| Milli        |                1000000000000000 |
| Milliether   |                1000000000000000 |
| Ether        |             1000000000000000000 |
| Einstein:    |          1000000000000000000000 |
| Kether:      |          1000000000000000000000 |
| Grand:       |          1000000000000000000000 |
| Mether:      |       1000000000000000000000000 |
| Gether:      |    1000000000000000000000000000 |
| Tether:      | 1000000000000000000000000000000 |

** Gas

- Después de la creación de la transacción, cada transacción es cargada con gas,
  la cual limita la cantidad de trabajo que es necesario que es necesario para
  ejecutar la transacción y para pagar su ejecución.
- El precio del gas es un valor establecido por el creador de la transacción,
  quien tiene que pagar /precio de gas * gas/ desde la cuenta de envío.

** Gas

Dependiendo del total que se quiere gastar para minar una transacción, los
costos más comunes para estos son:

- 40 GWei (gigaWei) de Precio de Gas para casi siempre la transacción se
  encuentre en el próximo bloque minado.
- 20 GWei va a permitir que la transacción se encuentre entre los siguientes
  bloques minados.
- 2 GWei usualmente permitirá que la transacción se encuentre entre los bloques
  de los siguientes minutos.

Estos valores están limitados a 50 GWei de precio de gas para evitar que las
personas acaparen que ciertas transacciones siempre sean las primeras minadas.

** Almacenamiento, memoria y la pila

- Cada cuenta tiene un área de memoria persistente, la cuál es llamada
  *storage*. Storage es un diccionario que mapea palabras de 256 bits a palabras
  de 256 bits. Aquí es donde las variables de estado de contrato residen. Su uso
  es costoso.
- La segunda área de memoria es llamada *memory*, la cual es usada para mantener
  variables temporales. Se limpia entre llamadas de funciones.
- La tercera área de memoria es la *pila*, la cuál es usada para mantener
  variables locales pequeñas. Sólo puede mantener una cantidad limitada de
  elementos.


** Invocaciones de Mensajes

- Los contratos pueden invocar a otros contratos o enviar Ether a cuentas que no
  son contratos a través de invocaciones de mensajes.
- Similares a las transacciones, en que tienen un emisor, un objetivo, data
  payload, Ether y gas.

* Solidity en profundidad

** ¿Qué es solidity?

- Es un lenguaje de alto nivel, cuya sintaxis es muy similar a Javascript
- Se compila a bytecode que después es ejecutado en la EVM.
- Solidity es un lenguaje Turing-Completo

** IDEs para el desarrollo de smart-contracts con solidity
- [[https://remix.ethereum.org/][Remix]] :: Editor oficial de ethereum
- [[https://azuremarketplace.microsoft.com/en-us/marketplace/apps/ethereum.ethereum-studio][Ethereum studio]] :: Plugin para visual studio
- [[https://plugins.jetbrains.com/plugin/9475-intellij-solidity][Plugin de Intellij]] ::
- [[https://github.com/0mkara/etheratom][EtherAtom]] :: Plugin para Atom
- [[https://github.com/ethereum/emacs-solidity][solidity-mode]] :: Modo de edición de solidity para emacs.

** Frameworks para la construcción de smart-contracts
- [[http://truffleframework.com][Truffle]] :: Framework para la construcción smart-contracts
- [[https://github.com/embark-framework/embark][Embark]] :: Framework for serverless Decentralized Applications using Ethereum,
     IPFS and other platforms
- [[https://dapp.readthedocs.io/en/latest/][dapp]] :: Dapp is a simple command line tool for smart contract development.

** Estructuras de solidity

Solidity cuenta con varias estructuras para crear contratos inteligentes:

- [[http://solidity.readthedocs.io/en/develop/types.html][Tipos de datos]] :: bool, int, uint, string, address, tipos de funciones
  (internas, externas)
- Estructuras de datos :: arrays, bytes{1,32}, enums, mappings
- [[http://solidity.readthedocs.io/en/develop/units-and-global-variables.html][Unidades y variables globales]] :: block, msg, tx, funciones criptográficas
- [[http://solidity.readthedocs.io/en/develop/control-structures.html][Estructuras de control]] :: if, else, while, for, do, break, continue, return, ?

** Creando un smart-contract con truffle

#+begin_src sh
mkdir ballot
cd ballot
truffle init
#+end_src

** Iniciando un cliente de ethereum

Utilizaremos ganache, el cual permite generar automáticamente una blockchain en
la computadora, cuentas, así como visualizar las transacciones y los bloques
minados.

** Compilando el smart-contract

Copiaremos el ejemplo de la votación que está en

[[file:ballot/voting.sol]]

Dentro de la carpeta de *ballot* ejecutamos el código que está [[file:ballot/tools.js][tools.js]].

* Bibliografía

https://myetherwallet.github.io/knowledge-base/gas/what-is-gas-ethereum.html
https://solidity.readthedocs.io/en/v0.4.23/introduction-to-smart-contracts.html
http://solidity.readthedocs.io/en/develop/types.html
http://solidity.readthedocs.io/en/develop/units-and-global-variables.html
https://stackoverflow.com/questions/33839154/in-ethereum-solidity-what-is-the-purpose-of-the-memory-keyword/33839164#33839164
